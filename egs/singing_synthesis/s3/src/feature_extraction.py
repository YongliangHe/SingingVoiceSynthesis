import os
import sys
import shutil
import glob
import time
import multiprocessing as mp
import numpy as np


merlin_dir = '/home/yongliang/third_party/merlin'

world  = os.path.join(merlin_dir, "tools/bin/WORLD")
sptk   = os.path.join(merlin_dir, "tools/bin/SPTK-3.9")
reaper = os.path.join(merlin_dir, "tools/bin/REAPER")

b_use_reaper = True

class FeatureExtractor():

    def __init__(self, wav_dir, fs, feat_dir):
        self.wav_dir = wav_dir
        if fs != 16000:
            print('For this projects, I use 16000Hz wav files')
            raise
        self.fs = fs
        self.nFFTHalf = 1024
        self.alpha = 0.58
        self.mcsize = 59

        self.feat_dir = feat_dir

        self.sp_dir  = os.path.join(feat_dir, 'sp' )
        self.mgc_dir = os.path.join(feat_dir, 'mgc')
        self.ap_dir  = os.path.join(feat_dir, 'ap' )
        self.bap_dir = os.path.join(feat_dir, 'bap')
        self.f0_dir  = os.path.join(feat_dir, 'f0' )
        self.lf0_dir = os.path.join(feat_dir, 'lf0')

        if not os.path.exists(feat_dir):
            os.mkdir(feat_dir)

        if not os.path.exists(self.sp_dir):
            os.mkdir(self.sp_dir)

        if not os.path.exists(self.mgc_dir):
            os.mkdir(self.mgc_dir)

        if not os.path.exists(self.bap_dir):
            os.mkdir(self.bap_dir)

        if not os.path.exists(self.f0_dir):
            os.mkdir(self.f0_dir)

        if not os.path.exists(self.lf0_dir):
            os.mkdir(self.lf0_dir)


    def _get_wav_filelist(self):
        wav_files = []
        for file in os.listdir(self.wav_dir):
            whole_filepath = os.path.join(self.wav_dir,file)
            if os.path.isfile(whole_filepath) and str(whole_filepath).endswith(".wav"):
                wav_files.append(whole_filepath)
        wav_files.sort()
        return wav_files

    def _read_binfile(self, filename, dim=60, dtype=np.float64):
        '''
        Reads binary file into numpy array.
        '''
        fid = open(filename, 'rb')
        v_data = np.fromfile(fid, dtype=dtype)
        fid.close()
        if np.mod(v_data.size, dim) != 0:
            raise ValueError('Dimension provided not compatible with file size.')
        m_data = v_data.reshape((-1, dim)).astype('float64') # This is to keep compatibility with numpy default dtype.
        m_data = np.squeeze(m_data)
        return  m_data

    def _write_binfile(self, m_data, filename, dtype=np.float64):
        '''
        Writes numpy array into binary file.
        '''
        m_data = np.array(m_data, dtype)
        fid = open(filename, 'wb')
        m_data.tofile(fid)
        fid.close()
        return

    def _read_reaper_f0_file(self, est_file, skiprows=7):
        '''
        Reads f0 track into numpy array from EST file generated by REAPER.
        '''
        v_f0 = np.loadtxt(est_file, skiprows=skiprows, usecols=[2])
        v_f0[v_f0<0] = 0
        return v_f0

    def _reaper_f0_extract(self, in_wavfile, f0_file_ref, f0_file_out, frame_shift_ms=5.0):
        '''
        Extracts f0 track using REAPER.
        To keep consistency with the vocoder, it also fixes for the difference in number
        of frames between the REAPER f0 track and the acoustic parameters extracted by the vocoder.
        f0_file_ref: f0 extracted by the vocoder. It is used as a reference to fix the number of frames, as explained.
        '''

        # Run REAPER:
        print("Running REAPER f0 extraction...")
        cmd = "%s -a -s -x 650 -m 50 -u %1.4f -i %s -f %s" % (os.path.join(reaper, 'reaper'), frame_shift_ms / 1000.0, in_wavfile, f0_file_out + "_reaper")
        os.system(cmd)

        # Protection - number of frames:
        v_f0_ref = self._read_binfile(f0_file_ref, dim=1)
        v_f0     = self._read_reaper_f0_file(f0_file_out + "_reaper")
        frm_diff = v_f0.size - v_f0_ref.size
        if frm_diff<0:
            v_f0 = np.r_[ v_f0, np.zeros(-frm_diff) + v_f0[-1]]
        if frm_diff>0:
            v_f0 = v_f0[:-frm_diff]

        # Save f0 file:
        self._write_binfile(v_f0, f0_file_out)
        return

    def _process(self,filename):
        '''
        The function decomposes a wav file into F0, mel-cepstral coefficients, and aperiodicity
        :param filename: path to wav file
        :return: .lf0, .mgc and .bap files
        '''

        file_id = os.path.basename(filename).split(".")[0]
        print('\n' + file_id)

        ### WORLD ANALYSIS -- extract vocoder parameters ###
        ### extract sp, ap ###
        f0_file = os.path.join(self.f0_dir, file_id + '.f0')
        f0_world_file = f0_file
        if b_use_reaper:
            f0_world_file = f0_file + "_world"

        world_analysis_cmd = "%s %s %s %s %s" % (os.path.join(world, 'analysis'), \
                                                 filename,
                                                 f0_world_file, \
                                                 os.path.join(self.sp_dir, file_id + '.sp'), \
                                                 os.path.join(self.bap_dir, file_id + '.bapd'))
        os.system(world_analysis_cmd)

        ### Extract f0 using reaper ###
        if b_use_reaper:
            self._reaper_f0_extract(filename, f0_world_file, f0_file)

        ### convert f0 to lf0 ###
        sptk_x2x_da_cmd = "%s +da %s > %s" % (os.path.join(sptk, 'x2x'), f0_file, \
                                              os.path.join(self.f0_dir, file_id + '.f0a'))
        os.system(sptk_x2x_da_cmd)

        sptk_x2x_af_cmd = "%s +af %s | %s > %s " % (os.path.join(sptk, 'x2x'), \
                                                    os.path.join(self.f0_dir, file_id + '.f0a'), \
                                                    os.path.join(sptk, 'sopr') + ' -magic 0.0 -LN -MAGIC -1.0E+10', \
                                                    os.path.join(self.lf0_dir, file_id + '.lf0'))
        os.system(sptk_x2x_af_cmd)

        ### convert sp to mgc ###
        sptk_x2x_df_cmd1 = "%s +df %s | %s | %s >%s" % (os.path.join(sptk, 'x2x'), \
                                                        os.path.join(self.sp_dir, file_id + '.sp'), \
                                                        os.path.join(sptk, 'sopr') + ' -R -m 32768.0', \
                                                        os.path.join(sptk, 'mcep') + ' -a ' + str(self.alpha) + ' -m ' + str(
                                                            self.mcsize) + ' -l ' + str(
                                                            self.nFFTHalf) + ' -e 1.0E-8 -j 0 -f 0.0 -q 3 ', \
                                                        os.path.join(self.mgc_dir, file_id + '.mgc'))
        os.system(sptk_x2x_df_cmd1)

        ### convert bapd to bap ###
        sptk_x2x_df_cmd2 = "%s +df %s > %s " % (os.path.join(sptk, "x2x"), \
                                                os.path.join(self.bap_dir, file_id + ".bapd"), \
                                                os.path.join(self.bap_dir, file_id + '.bap'))
        os.system(sptk_x2x_df_cmd2)

    def extract_feat(self):
        wav_files = self._get_wav_filelist()
        pool = mp.Pool(mp.cpu_count())
        pool.map(self._process, wav_files)
        print("Featers are ready in: " + self.feat_dir)
